@using byte_hunt.Models.Comparador
@model byte_hunt.Models.Comparador.ItemComparisonViewModel

@{
    ViewData["Title"] = "Comparação";
    <link rel="stylesheet" href="~/css/compare.css" asp-append-version="true"/>
    
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="~/css/fundo_container.css" asp-append-version="true"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
}
<div class="vw-fundo"></div>
<div class="container vw-container">
<h2>Comparação</h2>
<div class="table-responsive">
    <table class="table table-bordered align-middle shadow-sm text-center" style="border-collapse: separate; border-spacing: 0 0.75rem;">
        <tbody>
        <!-- Foto -->
        <tr class="info-row" style="height: 150px;">
            <td class="text-start ps-3 fw-semibold"></td>
            @foreach (var item in Model.Items)
            {
                <td>
                    <img src="@(string.IsNullOrEmpty(item.FotoItem) ? Url.Content("~/images/no_image.jpg") : Url.Content("/itens_Imagens/" + item.FotoItem))"
                         alt="Foto de @item.Nome"
                         style="height: 130px; width: 100%; object-fit: contain;" 
                         onerror="this.onerror=null; this.src='/images/no_image.jpg';"/>
                </td>
            }
        </tr>

        <!-- Nome -->
        <tr class="info-row">
            <td class="text-start ps-3 fw-semibold"></td>
            @foreach (var item in Model.Items)
            {
                <td class="fw-bold fs-4">@item.Nome</td>
            }
        </tr>

        <!-- Marca -->
        <tr class="info-row">
            <td class="text-start ps-3 fw-semibold"></td>
            @foreach (var item in Model.Items)
            {
                <td class="fw-normal fs-5">@item.Marca</td>
            }
        </tr>

        <!-- Spacer -->
        <tr class="info-row">
            <td colspan="@(Model.Items.Count + 1)" style="height: 1rem;"></td>
        </tr>

            <!-- Atributos -->
            @foreach (var row in Model.AttrRows)
            {
                <tr style="height: 3.5rem;">
                    <th class="bg-light text-start ps-3" style="font-size: 1.05rem; font-weight: 600;">
                        @row.Key
                    </th>
                    @for (int i = 0; i < row.Values.Count; i++)
                    {
                        var css = row.Highlights[i] switch
                        {
                            HighlightType.Best => "table-success",
                            HighlightType.Worst => "table-danger",
                            _ => ""
                        };

                        string display = FormatValue(row.Key, row.Values[i]);
                        <td class="@css text-start ps-3" style="font-size: 1rem;">
                            @display
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>
</div>

@functions {
    string FormatValue(string key, string rawValue) {
        // Sim/Não direto
        if (rawValue.Trim().Equals("Sim", StringComparison.OrdinalIgnoreCase) ||
            rawValue.Trim().Equals("Não", StringComparison.OrdinalIgnoreCase)) {
            return rawValue;
        }

        // Tentativa de conversão numérica
        if (!decimal.TryParse(
                rawValue.Replace(",", ".").Trim(),
                System.Globalization.NumberStyles.Number,
                System.Globalization.CultureInfo.InvariantCulture,
                out var val))
            return rawValue;

        // Formatação especial
        return key switch {
            "Armazenamento" => FormatStorage(val),
            "RAM" => $"{val:0.#} GB",
            "Autonomia" => $"{val} mAh",
            "Peso" => $"{val} g",
            "Peso com suporte" => $"{val} kg",
            "Peso sem suporte" => $"{val} kg",
            "Câmara principal" or "Câmara frontal" or "Câmara traseira" => $"{val} MP",
            "Zoom ótico" => $"{val}x",
            "Carregamento" or "Carregamento wireless" => $"{val} W",
            "Brilho" => $"{val} nits",
            "Contraste" => $"{val}",
            "Ecrã" or "Tamanho do ecrã" => $"{val:0.#}\"",
            "Preço" => $"{val:0.00} €",
            "Resposta" => $"{val:0.#} ms",
            "Taxa de atualização" => $"{val:0.#} Hz",
            "Bluetooth" => $"v{val:0.#}",
            "Frequência base" or "Frequência turbo" or "Frequência base (P)" or "Frequência base (E)" => $"{val:0.##} GHz",
            "CacheL2" or "CacheL3" => $"{val:0.#} MB",
            "BoostClock" => $"{val:0.#} MHz",
            "Bus Width" => $"{val:0} bit",
            "Largura de banda" => $"{val:0.#} GB/s",
            "TDP" or "TGP GPU" => $"{val:0.#} W",
            "Memória máxima" => $"{val:0.#} GB",
            "VRAM" => $"{val:0.#} GB",
            _ => $"{val:0.#}"
        };
    }

    string FormatStorage(decimal gb) {
        if (gb >= 1024)
            return $"{gb / 1024:0.#} TB";
        if (gb < 1)
            return $"{gb * 1024:0.#} MB";
        return $"{gb:0.#} GB";
    }
}
