@model byte_hunt.Models.ItemCompareSelectViewModel

@{
    ViewData["Title"] = "Comparar Items";
    var itemsJson = System.Text.Json.JsonSerializer.Serialize(
        Model.AllItems.Select(i => new {
            id = i.Id,
            name = i.Nome,
            categoryId = i.CategoriaId,
            category = i.Categoria.Nome
        })
    );
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
}

<h2>Selecione os itens para comparar:</h2>

<form id="compare-form" method="post" action="/Comparacao/RunCompare">
    <div id="input-container">
        <div class="input-group mb-2">
            <input class="form-control item-input" name="itemNames" placeholder="Procurar item..."
                   list="item-suggestions" autocomplete="off"/>
        </div>
        <div class="input-group mb-2">
            <input class="form-control item-input" name="itemNames" placeholder="Procurar item..."
                   list="item-suggestions" autocomplete="off"/>
        </div>
    </div>
    <button type="button" id="add-input" class="btn btn-secondary mb-2"><i class="bi bi-plus-circle"></i></button>
    <button type="submit" class="btn btn-primary" id="submit-btn" disabled>Comparar</button>

    <datalist id="item-suggestions"></datalist>
</form>

@section Scripts {
    <script>
        const allItems = @Html.Raw(itemsJson);
        const container = document.getElementById('input-container');
        const addInputBtn = document.getElementById('add-input');
        const suggestions = document.getElementById('item-suggestions');
        const submitBtn = document.getElementById('submit-btn');

        // maximo de itens
        const maxInputs = 4;
        let referenceCategoryId = null;

        // definir sugestoes de input
        function updateSuggestions(currentInput = "") {
            const usedNames = Array.from(document.querySelectorAll('.item-input')).map(i => i.value.toLowerCase());
            suggestions.innerHTML = '';

            let filtered;

            // ja foi colocado pelo menos um char
            // mostrar apenas itens da mesma categoria, que possuem o char do input
            if (currentInput.length > 0) {
                filtered = allItems.filter(item => {
                    const notUsed = !usedNames.includes(item.name.toLowerCase()); // ainda n foi usado
                    const sameCategory = !referenceCategoryId || item.categoryId === referenceCategoryId; // mesma categoria
                    const matchesInput = item.name.toLowerCase().includes(currentInput.toLowerCase()); // corresponde ao input
                    return notUsed && sameCategory && matchesInput;
                });
            } else if (referenceCategoryId) {
                // nao tem input, mas ja se sabe a categoria baseada nas outras inputs
                filtered = allItems.filter(item => {
                    const notUsed = !usedNames.includes(item.name.toLowerCase());
                    const sameCategory = item.categoryId === referenceCategoryId;
                    return notUsed && sameCategory;
                });
            } else {
                // nenhuma categoria definida, e input limpo
                return;
            }

            // limitar a X sugestoes
            filtered.slice(0, 5).forEach(item => {
                const opt = document.createElement('option');
                opt.value = item.name;
                suggestions.appendChild(opt);
            });
        }
        
        // evento para lidar com a mudanca de input
        function onInputChange(e) {
            const name = e.target.value.toLowerCase();
            const match = allItems.find(i => i.name.toLowerCase() === name);

            if (match) {
                const inputs = Array.from(document.querySelectorAll('.item-input'));
                const matches = inputs.filter(inp =>
                    allItems.some(i => i.name.toLowerCase() === inp.value.toLowerCase())
                );

                referenceCategoryId = match.categoryId; // definir categoria com base no item identificado
                updateSuggestions(e.target.value);
                submitBtn.disabled = matches.length < 2;
            } else {
                // verificar se ainda tem algum input valido
                const inputs = Array.from(document.querySelectorAll('.item-input'));
                const remainingValid = inputs
                    .map(inp => allItems.find(i => i.name.toLowerCase() === inp.value.toLowerCase()))
                    .filter(Boolean); // filtrar apenas os validos

                if (remainingValid.length > 0) {
                    referenceCategoryId = remainingValid[0].categoryId; // manter categoria do primeiro valido
                } else {
                    referenceCategoryId = null; // limpar categoria se nenhum valido
                }

                updateSuggestions(e.target.value);
                submitBtn.disabled = true;
            }
        }

        // adicionar mais inputs a comparacao
        function addInputField() {
            const count = container.querySelectorAll('.item-input').length;
            if (count >= maxInputs) return;

            const div = document.createElement('div');
            div.className = "input-group mb-2";
            div.innerHTML = `
            <input class="form-control item-input" name="itemNames" placeholder="Procurar item..." list="item-suggestions" autocomplete="off" />
        `;
            container.appendChild(div);

            updateSuggestions(""); // atualizar sugestoes com base na categoria, se houver
        }

        // escutar eventos de input nas caixas de texto
        container.addEventListener('input', e => {
            if (e.target.matches('.item-input')) onInputChange(e);
        });

        // adicionar novo campo ao clicar no botao
        addInputBtn.addEventListener('click', addInputField);

        // chamada inicial para preparar as sugestoes (vazio, mas pode ja definir por categoria)
        updateSuggestions("");
    </script>

}
