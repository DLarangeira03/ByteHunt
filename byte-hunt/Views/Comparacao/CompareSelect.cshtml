@model byte_hunt.Models.ItemCompareSelectViewModel

@{
    ViewData["Title"] = "Comparar Items";
    var itemsJson = System.Text.Json.JsonSerializer.Serialize(
        Model.AllItems.Select(i => new {
            id = i.Id,
            name = i.Nome,
            categoryId = i.CategoriaId,
            category = i.Categoria.Nome
        })
    );
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
}

<h2>Selecione os itens para comparar:</h2>

<form id="compare-form" method="post" action="/Comparacao/RunCompare">
    <div id="input-container">
        <div class="input-group mb-2">
            <input class="form-control item-input" name="itemNames" placeholder="Procurar item..." list="item-suggestions" autocomplete="off" />
        </div>
        <div class="input-group mb-2">
            <input class="form-control item-input" name="itemNames" placeholder="Procurar item..." list="item-suggestions" autocomplete="off" />
        </div>
    </div>
    <button type="button" id="add-input" class="btn btn-secondary mb-2"><i class="bi bi-plus-circle"></i></button>
    <button type="submit" class="btn btn-primary" id="submit-btn" disabled>Comparar</button>

    <datalist id="item-suggestions"></datalist>
</form>

@section Scripts {
<script>
    const allItems = @Html.Raw(itemsJson);
    const container = document.getElementById('input-container');
    const addInputBtn = document.getElementById('add-input');
    const suggestions = document.getElementById('item-suggestions');
    const submitBtn = document.getElementById('submit-btn');

    // maximo de itens
    const maxInputs = 4;
    let referenceCategoryId = null;

    // definir sugestoes de input
    function updateSuggestions() {
        const usedNames = Array.from(document.querySelectorAll('.item-input')).map(i => i.value.toLowerCase());
        suggestions.innerHTML = '';

        const filtered = allItems.filter(item => {
            const notUsed = !usedNames.includes(item.name.toLowerCase());
            const sameCategory = !referenceCategoryId || item.categoryId === referenceCategoryId;
            return notUsed && sameCategory;
        });

        filtered.forEach(item => {
            const opt = document.createElement('option');
            opt.value = item.name;
            suggestions.appendChild(opt);
        });
    }

    // evento para lidar com a mudanca de input
    function onInputChange(e) {
        const name = e.target.value.toLowerCase();
        const match = allItems.find(i => i.name.toLowerCase() === name);

        if (match) {
            const inputs = Array.from(document.querySelectorAll('.item-input'));
            const matches = inputs.filter(inp => allItems.some(i => i.name.toLowerCase() === inp.value.toLowerCase()));
            referenceCategoryId = match.categoryId;

            updateSuggestions();
            submitBtn.disabled = matches.length < 2;
        } else {
            submitBtn.disabled = true;
        }
    }

    // adicionar mais inputs a comparacao
    function addInputField() {
        const count = container.querySelectorAll('.item-input').length;
        if (count >= maxInputs) return;

        const div = document.createElement('div');
        div.className = "input-group mb-2";
        div.innerHTML = `
            <input class="form-control item-input" name="itemNames" placeholder="Procurar item..." list="item-suggestions" autocomplete="off" />
        `;
        container.appendChild(div);
        updateSuggestions();
    }

    container.addEventListener('input', e => {
        if (e.target.matches('.item-input')) onInputChange(e);
    });

    addInputBtn.addEventListener('click', addInputField);
    updateSuggestions();
</script>
}
