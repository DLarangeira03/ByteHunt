@using Microsoft.AspNetCore.Identity
@model byte_hunt.Models.Comparador.ItemCompareSelectViewModel
@inject SignInManager<Utilizador> SignInManager
@inject UserManager<Utilizador> UserManager

@{
    ViewData["Title"] = "Comparar Items";
    var itemsJson = System.Text.Json.JsonSerializer.Serialize(
        Model.AllItems.Select(i => new {
            id = i.Id,
            name = i.Nome,
            categoryId = i.CategoriaId,
            category = i.Categoria.Nome
        })
    );
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="~/css/fundo_container.css" asp-append-version="true"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/compareSelect.css" asp-append-version="true"/>
    
}

<div class="vw-fundo"></div>
<div class="container vw-container">
<h2 style="margin-bottom: 2rem">Selecione os itens para comparar:</h2>

<form asp-action="RunCompare" method="post">
    <div class="d-flex justify-content-center mb-3 flex-wrap gap-2" id="input-container">
        <div class="input-wrapper position-relative">
            <input class="form-control item-input" name="itemNames" placeholder="Procurar item..." autocomplete="off" />
            <div class="suggestion-box position-absolute bg-white border rounded shadow-sm mt-1 w-100"></div>
        </div>
        <div class="input-wrapper position-relative">
            <input class="form-control item-input" name="itemNames" placeholder="Procurar item..." autocomplete="off" />
            <div class="suggestion-box position-absolute bg-white border rounded shadow-sm mt-1 w-100"></div>
        </div>
        <button id="add-input" type="button" class="btn btn-secondary align-self-stretch">
            <i class="bi bi-plus-circle"></i>
        </button>
    </div>

    <div class="text-center">
        <button id="submit-btn" type="submit" class="btn btn-primary px-3 py-2" disabled>Comparar <i class="bi bi-arrow-right"></i></button>

    </div>
</form>
@if (SignInManager.IsSignedIn(User)) {
    <div class="alert alert-info d-flex align-items-center gap-2 mt-3" role="alert">
        <i class="bi bi-info-circle-fill"></i>
        As comparações realizadas serão guardadas no seu histórico.
        <a asp-action="HistoricoComparacao" class="ms-1">Ver histórico</a>.
    </div>
    }
    else {
    <div class="alert alert-info d-flex align-items-center gap-2 mt-3" role="alert">
        <i class="bi bi-info-circle-fill"></i>
        Que tal guardar suas comparações em um histórico?
        <a asp-area="Identity" asp-page="/Account/Login" class="ms-1">Inicie sessão</a> para guardar e consultar suas comparações.
    </div>
    }
</div>



@section Scripts {
    <script>
        // variaveis principais
        const allItems = @Html.Raw(itemsJson);
        const container = document.getElementById('input-container');
        const addInputBtn = document.getElementById('add-input');
        const submitBtn = document.getElementById('submit-btn');
        const maxInputs = 4;

        //handle de mudancas no input
        function onInputChange(e) {
            const inputs = Array.from(document.querySelectorAll('.item-input'));
            const values = inputs.map(inp => inp.value.trim().toLowerCase());
            
            const validItems = values
                .map(val => allItems.find(i => i.name.toLowerCase() === val))
                .filter(Boolean);

            const invalidOrPartial = values.filter(v =>
                v.length > 0 && !allItems.some(i => i.name.toLowerCase() === v)
            );
            
            //check de categoria
            const referenceCategoryId = validItems[0]?.categoryId || null;
            const allSameCategory = validItems.every(i => i.categoryId === referenceCategoryId);

            submitBtn.disabled = !(
                validItems.length >= 2 &&
                validItems.length <= 4 &&
                invalidOrPartial.length === 0 &&
                allSameCategory
            );
        }

        // calcular e mostrar sugestoes nas selects
        function renderSuggestions(inputElem, currentValue = "") {
            const inputValue = currentValue.trim().toLowerCase();
            const allInputs = Array.from(document.querySelectorAll('.item-input'));
            const usedNames = allInputs.map(i => i.value.trim().toLowerCase());

            const validItem = allInputs
                .map(i => allItems.find(item => item.name.toLowerCase() === i.value.trim().toLowerCase()))
                .find(Boolean);

            //utilizar categoria se exisir em alguma select
            const referenceCategoryId = validItem?.categoryId || null;

            let filtered;
            if (inputValue.length > 0) {
                //se existe algo digitado, filtra por nome
                filtered = allItems.filter(item => {
                    const notUsed = !usedNames.includes(item.name.toLowerCase());
                    const sameCategory = !referenceCategoryId || item.categoryId === referenceCategoryId;
                    const matches = item.name.toLowerCase().includes(inputValue);
                    return notUsed && sameCategory && matches;
                });
            } else {
                //senao aleatorio
                filtered = allItems.filter(item => {
                    const notUsed = !usedNames.includes(item.name.toLowerCase());
                    const sameCategory = !referenceCategoryId || item.categoryId === referenceCategoryId;
                    return notUsed && sameCategory;
                });

                //aleatoriedade de sugestao
                for (let i = filtered.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [filtered[i], filtered[j]] = [filtered[j], filtered[i]];
                }
            }

            filtered = filtered.slice(0, 10);

            const box = inputElem.nextElementSibling;
            box.innerHTML = '';
            if (filtered.length === 0) {
                box.style.display = 'none';
                return;
            }

            filtered.forEach(item => {
                const div = document.createElement('div');
                div.textContent = item.name;
                div.addEventListener('mousedown', () => {
                    inputElem.value = item.name;
                    box.style.display = 'none';
                    onInputChange({target: inputElem});
                });
                box.appendChild(div);
            });

            box.style.display = 'block';
        }
    
        //adicionar novos campos the input
        function addInputField() {
            const count = container.querySelectorAll('.item-input').length;
            if (count >= maxInputs) return;

            const wrapper = document.createElement('div');
            wrapper.className = "input-wrapper position-relative";
            wrapper.innerHTML = `
                <input class="form-control item-input" name="itemNames" placeholder="Procurar item..." autocomplete="off" />
                <div class="suggestion-box position-absolute bg-white border rounded shadow-sm mt-1 w-100"></div>
            `;
            container.insertBefore(wrapper, addInputBtn);
        }

        // eventos de input e foco em select
        container.addEventListener('input', e => {
            if (e.target.matches('.item-input')) {
                onInputChange(e);
                renderSuggestions(e.target, e.target.value);
            }
        });
        container.addEventListener('focusin', e => {
            if (e.target.matches('.item-input')) {
                renderSuggestions(e.target, e.target.value);
            }
        });
        container.addEventListener('focusout', e => {
            if (e.target.matches('.item-input')) {
                setTimeout(() => {
                    const box = e.target.nextElementSibling;
                    if (box) box.style.display = 'none';
                }, 100);
            }
        });

        addInputBtn.addEventListener('click', addInputField);
    </script>
}