@using Microsoft.AspNetCore.Identity
@model byte_hunt.Models.Item
@inject SignInManager<Utilizador> SignInManager
@inject UserManager<Utilizador> UserManager

@{
    ViewData["Title"] = "Detalhes do Produto";

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/itens_details_style.css" asp-append-version="true"/>
}



<div class="container py-4">
    <div class="produto-card row g-0">
        <div class="col-md-6">
            @if (!string.IsNullOrEmpty(Model.FotoItem))
            {
                <img src="~/itens_Imagens/@Model.FotoItem" alt="@Model.Nome" class="produto-img" style=" width: 100%; object-fit: contain;" onerror="this.onerror=null; this.src='/images/no_image.jpg';"/>
            }
            else
            {
                <img src="~/images/no_image.jpg" alt="Produto" class="produto-img">
            }
        </div>

        <div class="col-md-6 p-5 d-flex flex-column justify-content-between">
            <div>
                <h1 class="fw-bold mb-3">@Model.Nome</h1>
                <h5 class="badge bg-primary mb-2">@Model.Categoria?.Nome</h5>
                <h3 class="text-success fw-bold mt-3">@Model.Preco?.ToString("C")</h3>
                <h5 class="text-muted mb-4">Marca: @Model.Marca</h5>
                <p class="mb-4">@Model.Descricao</p>
            </div>

            <div class="mt-4">
                <a asp-action="Index" class="btn btn-dark rounded-pill">
                    <i class="bi bi-arrow-left"></i> Voltar à Lista
                </a>
                @if (SignInManager.IsSignedIn(User) && (User.IsInRole("Moderator") || User.IsInRole("Administrator"))) {
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary rounded-pill me-2">
                        <i class="bi bi-pencil-fill"></i> Editar
                    </a> 
                }
                
            </div>
        </div>
    </div>
    <div class="produto-card row g-0 mt-5" style="padding: 1rem; padding-bottom: 4rem">
        <h2 class=" w-100 mb-4">Especificações</h2>
        @if (!string.IsNullOrWhiteSpace(Model.AttrsJson))
        {
            var attrs = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(Model.AttrsJson);
            if (attrs != null && attrs.Count > 0)
            {
                <table class="table table-striped table-bordered align-middle shadow-sm rounded">
                    <tbody>
                    @foreach (var attr in attrs.OrderBy(a => a.Key))
                    {
                        <tr style="height: 3rem;">
                            <th class="bg-light text-start ps-3" style="width: 30%; font-size: 1.15rem; font-weight: 700; vertical-align: middle;">
                                @attr.Key
                            </th>
                            <td class="text-start ps-3" style="font-size: 1.1rem; vertical-align: middle;">
                                @FormatValue(attr.Key, attr.Value)
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        }
        else
        {
            <h5 class="text-muted">Por enquanto não temos mais informações sobre este produto...</h5>
        }
    </div>
</div>

@functions {
    string FormatValue(string key, string rawValue) {
        // Sim/Não direto
        if (rawValue.Trim().Equals("Sim", StringComparison.OrdinalIgnoreCase) ||
            rawValue.Trim().Equals("Não", StringComparison.OrdinalIgnoreCase)) {
            return rawValue;
        }

        // Tentativa de conversão numérica
        if (!decimal.TryParse(
                rawValue.Replace(",", ".").Trim(),
                System.Globalization.NumberStyles.Number,
                System.Globalization.CultureInfo.InvariantCulture,
                out var val))
            return rawValue;

        // Formatação especial
        return key switch {
            "Armazenamento" => FormatStorage(val),
            "RAM" => $"{val:0.#} GB",
            "Autonomia" => $"{val} mAh",
            "Peso" => $"{val} g",
            "Peso com suporte" => $"{val} kg",
            "Peso sem suporte" => $"{val} kg",
            "Câmara principal" or "Câmara frontal" or "Câmara traseira" => $"{val} MP",
            "Zoom ótico" => $"{val}x",
            "Carregamento" or "Carregamento wireless" => $"{val} W",
            "Brilho" => $"{val} nits",
            "Contraste" => $"{val}",
            "Ecrã" or "Tamanho do ecrã" => $"{val:0.#}\"",
            "Preço" => $"{val:0.00} €",
            "Resposta" => $"{val:0.#} ms",
            "Taxa de atualização" => $"{val:0.#} Hz",
            "Bluetooth" => $"v{val:0.#}",
            "Frequência base" or "Frequência turbo" or "Frequência base (P)" or "Frequência base (E)" => $"{val:0.##} GHz",
            "CacheL2" or "CacheL3" => $"{val:0.#} MB",
            "BoostClock" => $"{val:0.#} MHz",
            "Bus Width" => $"{val:0} bit",
            "Largura de banda" => $"{val:0.#} GB/s",
            "TDP" or "TGP GPU" => $"{val:0.#} W",
            "Memória máxima" => $"{val:0.#} GB",
            "VRAM" => $"{val:0.#} GB",
            _ => $"{val:0.#}"
        };
    }

    string FormatStorage(decimal gb) {
        if (gb >= 1024)
            return $"{gb / 1024:0.#} TB";
        if (gb < 1)
            return $"{gb * 1024:0.#} MB";
        return $"{gb:0.#} GB";
    }
}
